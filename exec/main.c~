//#include "stm32f10x_lib.h"
#include "stm32f10x.h"
#include "core_cm3.h"

//GPIO_InitTypeDef GPIO_InitStructure;
//ErrorStatus HSEStartUpStatus;

volatile uint32_t state = 0x00000000;
//void RCC_Configuration(void);
//void NVIC_Configuration(void);
//void Delay(vu32 nCount);

int main(void) 
{
	RCC_Configuration();										   /* Configure the system clocks */
	NVIC_Configuration();													/* NVIC Configuration */
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);					/* Enable GPIOC clock */
															/* Configure PCA0 as Output push-pull */
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;

//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1; 
//	GPIO_Init(GPIOA, &GPIO_InitStructure);

RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; //enable GPIOC clock
RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable timer TIM2 clock

TIM2->PSC = 24000 - 1; //set prescaler for TIM2 as 24000
TIM2->ARR = 1000 - 1; //set auto-reload value for TIM2 as 1000
TIM2->CR1 |= TIM_CR1_CEN; //enable timer TIM2
SCB->AIRCR |= SCB_AIRCR_PRIGROUP0; //set Interrupt priority group 0
NVIC->ISER[0] |= NVIC_ISER_SETENA_28; //enable nested interrupt for TIM2
NVIC->IP[7] |= 0x10; //set priority for TIM2
TIM2->DIER |= TIM_DIER_UIE; //unable update interrupt for TIM2


GPIOC->CRH &= ~GPIO_CRH_CNF8_0; //disable GPIOC8 input mode
GPIOC->CRH |= GPIO_CRH_MODE8_1; //set GPIOC8 to output mode with max speed 2 MHz
GPIOC->CRH &= ~GPIO_CRH_CNF9_0; //disable GPIOC9 input mode
GPIOC->CRH |= GPIO_CRH_MODE9_1; //set GPIOC9 to output mode with max speed 2 MHz

	while (1)
	{
//		GPIO_SetBits(GPIOA, GPIO_Pin_0);	Delay(0xBFFF0);
//		GPIO_ResetBits(GPIOA, GPIO_Pin_0);	Delay(0xBFFF0);
//		GPIO_SetBits(GPIOA, GPIO_Pin_1);	Delay(0xBFFF0);
	//	GPIO_ResetBits(GPIOA, GPIO_Pin_1);	Delay(0xBFFF0);
	}
}

void TIM2_IRQHandler(void){
TIM2->SR ^= TIM_SR_UIF;
	GPIOC->ODR = state;
	GPIOC->BSRR |= GPIO_BSRR_BS8;
	state = 0xFFFFFFFF-state;
}



/*

void RCC_Configuration(void)
{

	RCC_DeInit();										  
	RCC_HSEConfig(RCC_HSE_ON);														
	HSEStartUpStatus = RCC_WaitForHSEStartUp();							

	if(HSEStartUpStatus == SUCCESS)
	{
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);			
		FLASH_SetLatency(FLASH_Latency_2);									
		RCC_HCLKConfig(RCC_SYSCLK_Div1); 										
		RCC_PCLK2Config(RCC_HCLK_Div1); 										 
		RCC_PCLK1Config(RCC_HCLK_Div2);											
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);		

		RCC_PLLCmd(ENABLE);															
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);				

		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);			 
		while(RCC_GetSYSCLKSource() != 0x08);	  
	}
}

void NVIC_Configuration(void)
{
	#ifdef  VECT_TAB_RAM  
	  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else
	  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
	#endif
}

void Delay(vu32 nCount)
{
	for(nCount; nCount != 0; nCount--);
}

*/



